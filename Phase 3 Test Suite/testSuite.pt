% test 1: program parsing test
using output

% test 2: basic declarations
using output
val c = 27
var v : string
type t : integer

% test 3: mix of declarations and statements
using output
val c = 20
var x : integer
if c == 10 then 
    x = 1
else
    x = 0
end

type t : string

% test 4: more complicated declaration
using output
var a, b, c : integer

% test 5: if statement 
using output
if x == y then
    z = w
else 
    z = 0
end

% test 6: if statement with elsif clause *option b was used for elsif*
using output
if x == y then
    z = w
elsif x == 1 then
    z = 1
else 
    z = 0
end

% test 7: basic do statement
using output
do 
    val z = 0
    break if z == 0
    var x : integer
end

% test 8: another do statement test with an if statement inside
using output
val z = 10
var x : integer
do 
    if z == 0 then
        x = 1
    else 
        x = 0
    end
    break if x == 0
    z = z - 1
end

% test 9: basic case statement  
using output
case i 
    when 42 then    
        x = 1
    when 41 then
        x = 2
    else 
        x = 3
end

% test 10: Empty Routines (one with parameter, one without)
using output
def p () 

end

% test 11: empty routine with parameter
using output
def p (var x : integer) 

end

% test 12: empty routine with multiple parameters
using output
def p (var x : integer, var y : string) 

end

% test 13: Empty public routine 
using output
def * p () 

end

% test 14: Empty Public routine with parameter
using output
def * p (var x : integer)

end

% test 15: Public routine with multiple parameters
using output
def * p (var x : integer, var y : integer)

end

% test 16: empty module
using output
module M

end

% test 17: module with declarations within 
using output
module M
    var x : integer
    type t : string
    val z = 0
end

% test 18: module with declarations and statements within 
using output
module M
    var x : integer
    if z == 1 then
        x = 1
    else
        x = 0
    end
end

% test 19: substring operator testing
using output
x = "string" $ 1..3

% test 20: more complex substring testing
using output
x = "string"
if x $ 1..3 == "tri" then
    y = 0
end

% test 21: index operator testing
using output
x = "string" ? "ring"

% test 22: more complex index test
using output
if "string" ? "ring" == 2 then
    x = 1
end

% test 23: length operator testing
using output
x = # "string"

% test 24: more complex length test
using output
if # "string" == 6 then
    x = 1
end

% test 25: not operator testing
using output
if !x == 0 then
    y = 1
end

% test 26: not equal operator testing
using output
if x != 0 then
    y = 1
end

% test 27: order of operations test
using output
x = # "string" + 1 *2
y = # ("string" $ 1..2)
z = ("string" $ 1..2) ? "tr"
